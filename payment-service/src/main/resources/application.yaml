spring:
  messages:
    basename: validation
  datasource:
    url: jdbc:postgresql://localhost:5432/cabdb?allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false
    username: def_user
    password: pass
  application:
    name: PAYMENT-SERVICE
  jpa:
    show-sql: true
    properties:
      hibernate:
        '[format_sql]': true
    hibernate:
      ddl-auto: validate
    generate-ddl: false
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    enabled: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8181/realms/taxi-realm
          jwk-set-uri: http://localhost:8181/realms/taxi-realm/protocol/openid-connect/certs
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json:
          trusted.packages: "*"
          type.mapping: CustomerCreationRequest:com.nikonenko.paymentservice.dto.customers.CustomerCreationRequest
      group-id: payment-group
      auto-offset-reset: latest
      payment-customer-name: payment-customer-topic

api:
  stripe:
    secret-key: ${STRIPE_SECRET_KEY}
    public-key: ${STRIPE_PUBLIC_KEY}

eureka:
  client:
    service-url:
      defaultZone: http://eureka@localhost:8761/eureka/

server:
  port: 8083

management:
  endpoints:
    web:
      exposure:
        include: [ "prometheus", "health"]
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      rate: 1.0
      probability: 1.0

jwt:
  auth:
    converter:
      resource-id: taxi-realm
      principal-attribute: sub